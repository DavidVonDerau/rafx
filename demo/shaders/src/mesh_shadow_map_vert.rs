// This code is auto-generated by the shader processor.

#[allow(unused_imports)]
use renderer_resources::ash::prelude::VkResult;

#[allow(unused_imports)]
use renderer_resources::{
    DescriptorSetAllocator, DescriptorSetArc, DescriptorSetInitializer, DynDescriptorSet,
    ImageViewResource, ResourceArc,
};

#[derive(Copy, Clone, Debug)]
#[repr(C)]
pub struct PerObjectDataStd140 {
    pub model: [[f32; 4]; 4],           // +0 (size: 64)
    pub model_view: [[f32; 4]; 4],      // +64 (size: 64)
    pub model_view_proj: [[f32; 4]; 4], // +128 (size: 64)
} // 192 bytes

impl Default for PerObjectDataStd140 {
    fn default() -> Self {
        PerObjectDataStd140 {
            model: <[[f32; 4]; 4]>::default(),
            model_view: <[[f32; 4]; 4]>::default(),
            model_view_proj: <[[f32; 4]; 4]>::default(),
        }
    }
}

pub type PerObjectDataUniform = PerObjectDataStd140;

pub const PER_OBJECT_DATA_DESCRIPTOR_SET_INDEX: usize = 2;
pub const PER_OBJECT_DATA_DESCRIPTOR_BINDING_INDEX: usize = 0;

pub struct DescriptorSet2Args<'a> {
    pub per_object_data: &'a PerObjectDataUniform,
}

impl<'a> DescriptorSetInitializer<'a> for DescriptorSet2Args<'a> {
    type Output = DescriptorSet2;

    fn create_dyn_descriptor_set(
        descriptor_set: DynDescriptorSet,
        args: Self,
    ) -> Self::Output {
        let mut descriptor = DescriptorSet2(descriptor_set);
        descriptor.set_args(args);
        descriptor
    }

    fn create_descriptor_set(
        descriptor_set_allocator: &mut DescriptorSetAllocator,
        descriptor_set: DynDescriptorSet,
        args: Self,
    ) -> VkResult<DescriptorSetArc> {
        let mut descriptor = Self::create_dyn_descriptor_set(descriptor_set, args);
        descriptor.0.flush(descriptor_set_allocator)?;
        Ok(descriptor.0.descriptor_set().clone())
    }
}

pub struct DescriptorSet2(pub DynDescriptorSet);

impl DescriptorSet2 {
    pub fn set_args_static(
        descriptor_set: &mut DynDescriptorSet,
        args: DescriptorSet2Args,
    ) {
        descriptor_set.set_buffer_data(
            PER_OBJECT_DATA_DESCRIPTOR_BINDING_INDEX as u32,
            args.per_object_data,
        );
    }

    pub fn set_args(
        &mut self,
        args: DescriptorSet2Args,
    ) {
        self.set_per_object_data(args.per_object_data);
    }

    pub fn set_per_object_data(
        &mut self,
        per_object_data: &PerObjectDataUniform,
    ) {
        self.0.set_buffer_data(
            PER_OBJECT_DATA_DESCRIPTOR_BINDING_INDEX as u32,
            per_object_data,
        );
    }

    pub fn flush(
        &mut self,
        descriptor_set_allocator: &mut DescriptorSetAllocator,
    ) -> VkResult<()> {
        self.0.flush(descriptor_set_allocator)
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_struct_per_object_data_std140() {
        assert_eq!(std::mem::size_of::<PerObjectDataStd140>(), 192);
        assert_eq!(std::mem::size_of::<[[f32; 4]; 4]>(), 64);
        assert_eq!(std::mem::align_of::<[[f32; 4]; 4]>(), 4);
        assert_eq!(memoffset::offset_of!(PerObjectDataStd140, model), 0);
        assert_eq!(std::mem::size_of::<[[f32; 4]; 4]>(), 64);
        assert_eq!(std::mem::align_of::<[[f32; 4]; 4]>(), 4);
        assert_eq!(memoffset::offset_of!(PerObjectDataStd140, model_view), 64);
        assert_eq!(std::mem::size_of::<[[f32; 4]; 4]>(), 64);
        assert_eq!(std::mem::align_of::<[[f32; 4]; 4]>(), 4);
        assert_eq!(
            memoffset::offset_of!(PerObjectDataStd140, model_view_proj),
            128
        );
    }
}
